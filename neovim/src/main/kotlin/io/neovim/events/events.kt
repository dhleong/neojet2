// Implementations of core Neovim event types.
//
// Generated from Neovim v0.4.3
//
// @author dhleong
//
package io.neovim.events

import com.fasterxml.jackson.annotation.JsonFormat
import io.neovim.ApiMethod
import io.neovim.events.params.CompletionItem
import io.neovim.events.params.ContentInfo
import io.neovim.events.params.HighlightAttrs
import io.neovim.events.params.ModeInfo
import io.neovim.events.params.TabInfo
import io.neovim.rpc.Packet
import io.neovim.types.Tabpage
import io.neovim.types.Window
import kotlin.Any
import kotlin.Boolean
import kotlin.Double
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import kotlin.collections.Map

@JsonFormat(shape = JsonFormat.Shape.ARRAY)
abstract class NeovimEvent : Packet {
    override val type: Packet.Type = Packet.Type.NOTIFICATION
}

/**
 * Redraw is an aggregate event that is not directly generated by the
 * API info since its format is non-standard
 */
data class Redraw(
    val events: List<NeovimEvent>
) : NeovimEvent()

@ApiMethod("mode_info_set", since = 3)
data class ModeInfoSet(
    val enabled: Boolean,
    val cursorStyles: List<ModeInfo>
) : NeovimEvent()

@ApiMethod("update_menu", since = 3)
object UpdateMenu : NeovimEvent()

@ApiMethod("busy_start", since = 3)
object BusyStart : NeovimEvent()

@ApiMethod("busy_stop", since = 3)
object BusyStop : NeovimEvent()

@ApiMethod("mouse_on", since = 3)
object MouseOn : NeovimEvent()

@ApiMethod("mouse_off", since = 3)
object MouseOff : NeovimEvent()

@ApiMethod("mode_change", since = 3)
data class ModeChange(
    val mode: String,
    val modeIdx: Long
) : NeovimEvent()

@ApiMethod("bell", since = 3)
object Bell : NeovimEvent()

@ApiMethod("visual_bell", since = 3)
object VisualBell : NeovimEvent()

@ApiMethod("flush", since = 3)
object Flush : NeovimEvent()

@ApiMethod("suspend", since = 3)
object Suspend : NeovimEvent()

@ApiMethod("set_title", since = 3)
data class SetTitle(
    val title: String
) : NeovimEvent()

@ApiMethod("set_icon", since = 3)
data class SetIcon(
    val icon: String
) : NeovimEvent()

@ApiMethod("option_set", since = 4)
data class OptionSet(
    val name: String,
    val value: Any
) : NeovimEvent()

@ApiMethod("update_fg", since = 3)
data class UpdateFg(
    val fg: Long
) : NeovimEvent()

@ApiMethod("update_bg", since = 3)
data class UpdateBg(
    val bg: Long
) : NeovimEvent()

@ApiMethod("update_sp", since = 3)
data class UpdateSp(
    val sp: Long
) : NeovimEvent()

@ApiMethod("resize", since = 3)
data class Resize(
    val width: Long,
    val height: Long
) : NeovimEvent()

@ApiMethod("clear", since = 3)
object Clear : NeovimEvent()

@ApiMethod("eol_clear", since = 3)
object EolClear : NeovimEvent()

@ApiMethod("cursor_goto", since = 3)
data class CursorGoto(
    val row: Long,
    val col: Long
) : NeovimEvent()

@ApiMethod("highlight_set", since = 3)
data class HighlightSet(
    val attrs: HighlightAttrs
) : NeovimEvent()

@ApiMethod("put", since = 3)
data class Put(
    val str: String
) : NeovimEvent()

@ApiMethod("set_scroll_region", since = 3)
data class SetScrollRegion(
    val top: Long,
    val bot: Long,
    val left: Long,
    val right: Long
) : NeovimEvent()

@ApiMethod("scroll", since = 3)
data class Scroll(
    val count: Long
) : NeovimEvent()

@ApiMethod("default_colors_set", since = 4)
data class DefaultColorsSet(
    val rgbFg: Long,
    val rgbBg: Long,
    val rgbSp: Long,
    val ctermFg: Long,
    val ctermBg: Long
) : NeovimEvent()

@ApiMethod("hl_attr_define", since = 5)
data class HlAttrDefine(
    val id: Long,
    val rgbAttrs: Map<String, Any>,
    val ctermAttrs: Map<String, Any>,
    val info: List<Any>
) : NeovimEvent()

@ApiMethod("hl_group_set", since = 6)
data class HlGroupSet(
    val name: String,
    val id: Long
) : NeovimEvent()

@ApiMethod("grid_resize", since = 5)
data class GridResize(
    val grid: Long,
    val width: Long,
    val height: Long
) : NeovimEvent()

@ApiMethod("grid_clear", since = 5)
data class GridClear(
    val grid: Long
) : NeovimEvent()

@ApiMethod("grid_cursor_goto", since = 5)
data class GridCursorGoto(
    val grid: Long,
    val row: Long,
    val col: Long
) : NeovimEvent()

@ApiMethod("grid_line", since = 5)
data class GridLine(
    val grid: Long,
    val row: Long,
    val colStart: Long,
    val data: List<Any>
) : NeovimEvent()

@ApiMethod("grid_scroll", since = 5)
data class GridScroll(
    val grid: Long,
    val top: Long,
    val bot: Long,
    val left: Long,
    val right: Long,
    val rows: Long,
    val cols: Long
) : NeovimEvent()

@ApiMethod("grid_destroy", since = 6)
data class GridDestroy(
    val grid: Long
) : NeovimEvent()

@ApiMethod("win_pos", since = 6)
data class WinPos(
    val grid: Long,
    val win: Window,
    val startrow: Long,
    val startcol: Long,
    val width: Long,
    val height: Long
) : NeovimEvent()

@ApiMethod("win_float_pos", since = 6)
data class WinFloatPos(
    val grid: Long,
    val win: Window,
    val anchor: String,
    val anchorGrid: Long,
    val anchorRow: Double,
    val anchorCol: Double,
    val focusable: Boolean
) : NeovimEvent()

@ApiMethod("win_external_pos", since = 6)
data class WinExternalPos(
    val grid: Long,
    val win: Window
) : NeovimEvent()

@ApiMethod("win_hide", since = 6)
data class WinHide(
    val grid: Long
) : NeovimEvent()

@ApiMethod("win_close", since = 6)
data class WinClose(
    val grid: Long
) : NeovimEvent()

@ApiMethod("msg_set_pos", since = 6)
data class MsgSetPos(
    val grid: Long,
    val row: Long,
    val scrolled: Boolean,
    val sepChar: String
) : NeovimEvent()

@ApiMethod("popupmenu_show", since = 3)
data class PopupmenuShow(
    val items: List<CompletionItem>,
    val selected: Long,
    val row: Long,
    val col: Long,
    val grid: Long
) : NeovimEvent()

@ApiMethod("popupmenu_hide", since = 3)
object PopupmenuHide : NeovimEvent()

@ApiMethod("popupmenu_select", since = 3)
data class PopupmenuSelect(
    val selected: Long
) : NeovimEvent()

@ApiMethod("tabline_update", since = 3)
data class TablineUpdate(
    val current: Tabpage,
    val tabs: List<TabInfo>
) : NeovimEvent()

@ApiMethod("cmdline_show", since = 3)
data class CmdlineShow(
    val content: List<ContentInfo>,
    val pos: Long,
    val firstc: String,
    val prompt: String,
    val indent: Long,
    val level: Long
) : NeovimEvent()

@ApiMethod("cmdline_pos", since = 3)
data class CmdlinePos(
    val pos: Long,
    val level: Long
) : NeovimEvent()

@ApiMethod("cmdline_special_char", since = 3)
data class CmdlineSpecialChar(
    val c: String,
    val shift: Boolean,
    val level: Long
) : NeovimEvent()

@ApiMethod("cmdline_hide", since = 3)
data class CmdlineHide(
    val level: Long
) : NeovimEvent()

@ApiMethod("cmdline_block_show", since = 3)
data class CmdlineBlockShow(
    val lines: List<ContentInfo>
) : NeovimEvent()

@ApiMethod("cmdline_block_append", since = 3)
data class CmdlineBlockAppend(
    val lines: List<ContentInfo>
) : NeovimEvent()

@ApiMethod("cmdline_block_hide", since = 3)
object CmdlineBlockHide : NeovimEvent()

@ApiMethod("wildmenu_show", since = 3)
data class WildmenuShow(
    val items: List<CompletionItem>
) : NeovimEvent()

@ApiMethod("wildmenu_select", since = 3)
data class WildmenuSelect(
    val selected: Long
) : NeovimEvent()

@ApiMethod("wildmenu_hide", since = 3)
object WildmenuHide : NeovimEvent()

@ApiMethod("msg_show", since = 6)
data class MsgShow(
    val kind: String,
    val content: List<Any>,
    val replaceLast: Boolean
) : NeovimEvent()

@ApiMethod("msg_clear", since = 6)
object MsgClear : NeovimEvent()

@ApiMethod("msg_showcmd", since = 6)
data class MsgShowcmd(
    val content: List<Any>
) : NeovimEvent()

@ApiMethod("msg_showmode", since = 6)
data class MsgShowmode(
    val content: List<Any>
) : NeovimEvent()

@ApiMethod("msg_ruler", since = 6)
data class MsgRuler(
    val content: List<Any>
) : NeovimEvent()

@ApiMethod("msg_history_show", since = 6)
data class MsgHistoryShow(
    val entries: List<Any>
) : NeovimEvent()
